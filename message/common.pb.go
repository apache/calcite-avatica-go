// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	common.proto
	requests.proto
	responses.proto

It has these top-level messages:
	ConnectionProperties
	StatementHandle
	Signature
	ColumnMetaData
	AvaticaType
	AvaticaParameter
	CursorFactory
	Frame
	Row
	DatabaseProperty
	WireMessage
	ColumnValue
	TypedValue
	MetaDataOperationArgument
	QueryState
	CatalogsRequest
	DatabasePropertyRequest
	SchemasRequest
	TablesRequest
	TableTypesRequest
	ColumnsRequest
	TypeInfoRequest
	PrepareAndExecuteRequest
	PrepareRequest
	FetchRequest
	CreateStatementRequest
	CloseStatementRequest
	OpenConnectionRequest
	CloseConnectionRequest
	ConnectionSyncRequest
	ExecuteRequest
	SyncResultsRequest
	CommitRequest
	RollbackRequest
	ResultSetResponse
	ExecuteResponse
	PrepareResponse
	FetchResponse
	CreateStatementResponse
	CloseStatementResponse
	OpenConnectionResponse
	CloseConnectionResponse
	ConnectionSyncResponse
	DatabasePropertyElement
	DatabasePropertyResponse
	ErrorResponse
	SyncResultsResponse
	RpcMetadata
	CommitResponse
	RollbackResponse
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Has to be consistent with Meta.StatementType
type StatementType int32

const (
	StatementType_SELECT    StatementType = 0
	StatementType_INSERT    StatementType = 1
	StatementType_UPDATE    StatementType = 2
	StatementType_DELETE    StatementType = 3
	StatementType_UPSERT    StatementType = 4
	StatementType_MERGE     StatementType = 5
	StatementType_OTHER_DML StatementType = 6
	StatementType_CREATE    StatementType = 7
	StatementType_DROP      StatementType = 8
	StatementType_ALTER     StatementType = 9
	StatementType_OTHER_DDL StatementType = 10
	StatementType_CALL      StatementType = 11
)

var StatementType_name = map[int32]string{
	0:  "SELECT",
	1:  "INSERT",
	2:  "UPDATE",
	3:  "DELETE",
	4:  "UPSERT",
	5:  "MERGE",
	6:  "OTHER_DML",
	7:  "CREATE",
	8:  "DROP",
	9:  "ALTER",
	10: "OTHER_DDL",
	11: "CALL",
}
var StatementType_value = map[string]int32{
	"SELECT":    0,
	"INSERT":    1,
	"UPDATE":    2,
	"DELETE":    3,
	"UPSERT":    4,
	"MERGE":     5,
	"OTHER_DML": 6,
	"CREATE":    7,
	"DROP":      8,
	"ALTER":     9,
	"OTHER_DDL": 10,
	"CALL":      11,
}

func (x StatementType) String() string {
	return proto.EnumName(StatementType_name, int32(x))
}
func (StatementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Rep int32

const (
	Rep_PRIMITIVE_BOOLEAN  Rep = 0
	Rep_PRIMITIVE_BYTE     Rep = 1
	Rep_PRIMITIVE_CHAR     Rep = 2
	Rep_PRIMITIVE_SHORT    Rep = 3
	Rep_PRIMITIVE_INT      Rep = 4
	Rep_PRIMITIVE_LONG     Rep = 5
	Rep_PRIMITIVE_FLOAT    Rep = 6
	Rep_PRIMITIVE_DOUBLE   Rep = 7
	Rep_BOOLEAN            Rep = 8
	Rep_BYTE               Rep = 9
	Rep_CHARACTER          Rep = 10
	Rep_SHORT              Rep = 11
	Rep_INTEGER            Rep = 12
	Rep_LONG               Rep = 13
	Rep_FLOAT              Rep = 14
	Rep_DOUBLE             Rep = 15
	Rep_BIG_INTEGER        Rep = 25
	Rep_BIG_DECIMAL        Rep = 26
	Rep_JAVA_SQL_TIME      Rep = 16
	Rep_JAVA_SQL_TIMESTAMP Rep = 17
	Rep_JAVA_SQL_DATE      Rep = 18
	Rep_JAVA_UTIL_DATE     Rep = 19
	Rep_BYTE_STRING        Rep = 20
	Rep_STRING             Rep = 21
	Rep_NUMBER             Rep = 22
	Rep_OBJECT             Rep = 23
	Rep_NULL               Rep = 24
	Rep_ARRAY              Rep = 27
	Rep_STRUCT             Rep = 28
	Rep_MULTISET           Rep = 29
)

var Rep_name = map[int32]string{
	0:  "PRIMITIVE_BOOLEAN",
	1:  "PRIMITIVE_BYTE",
	2:  "PRIMITIVE_CHAR",
	3:  "PRIMITIVE_SHORT",
	4:  "PRIMITIVE_INT",
	5:  "PRIMITIVE_LONG",
	6:  "PRIMITIVE_FLOAT",
	7:  "PRIMITIVE_DOUBLE",
	8:  "BOOLEAN",
	9:  "BYTE",
	10: "CHARACTER",
	11: "SHORT",
	12: "INTEGER",
	13: "LONG",
	14: "FLOAT",
	15: "DOUBLE",
	25: "BIG_INTEGER",
	26: "BIG_DECIMAL",
	16: "JAVA_SQL_TIME",
	17: "JAVA_SQL_TIMESTAMP",
	18: "JAVA_SQL_DATE",
	19: "JAVA_UTIL_DATE",
	20: "BYTE_STRING",
	21: "STRING",
	22: "NUMBER",
	23: "OBJECT",
	24: "NULL",
	27: "ARRAY",
	28: "STRUCT",
	29: "MULTISET",
}
var Rep_value = map[string]int32{
	"PRIMITIVE_BOOLEAN":  0,
	"PRIMITIVE_BYTE":     1,
	"PRIMITIVE_CHAR":     2,
	"PRIMITIVE_SHORT":    3,
	"PRIMITIVE_INT":      4,
	"PRIMITIVE_LONG":     5,
	"PRIMITIVE_FLOAT":    6,
	"PRIMITIVE_DOUBLE":   7,
	"BOOLEAN":            8,
	"BYTE":               9,
	"CHARACTER":          10,
	"SHORT":              11,
	"INTEGER":            12,
	"LONG":               13,
	"FLOAT":              14,
	"DOUBLE":             15,
	"BIG_INTEGER":        25,
	"BIG_DECIMAL":        26,
	"JAVA_SQL_TIME":      16,
	"JAVA_SQL_TIMESTAMP": 17,
	"JAVA_SQL_DATE":      18,
	"JAVA_UTIL_DATE":     19,
	"BYTE_STRING":        20,
	"STRING":             21,
	"NUMBER":             22,
	"OBJECT":             23,
	"NULL":               24,
	"ARRAY":              27,
	"STRUCT":             28,
	"MULTISET":           29,
}

func (x Rep) String() string {
	return proto.EnumName(Rep_name, int32(x))
}
func (Rep) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The severity of some unexpected outcome to an operation.
// Protobuf enum values must be unique across all other enums
type Severity int32

const (
	Severity_UNKNOWN_SEVERITY Severity = 0
	Severity_FATAL_SEVERITY   Severity = 1
	Severity_ERROR_SEVERITY   Severity = 2
	Severity_WARNING_SEVERITY Severity = 3
)

var Severity_name = map[int32]string{
	0: "UNKNOWN_SEVERITY",
	1: "FATAL_SEVERITY",
	2: "ERROR_SEVERITY",
	3: "WARNING_SEVERITY",
}
var Severity_value = map[string]int32{
	"UNKNOWN_SEVERITY": 0,
	"FATAL_SEVERITY":   1,
	"ERROR_SEVERITY":   2,
	"WARNING_SEVERITY": 3,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}
func (Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Enumeration corresponding to DatabaseMetaData operations
type MetaDataOperation int32

const (
	MetaDataOperation_GET_ATTRIBUTES             MetaDataOperation = 0
	MetaDataOperation_GET_BEST_ROW_IDENTIFIER    MetaDataOperation = 1
	MetaDataOperation_GET_CATALOGS               MetaDataOperation = 2
	MetaDataOperation_GET_CLIENT_INFO_PROPERTIES MetaDataOperation = 3
	MetaDataOperation_GET_COLUMN_PRIVILEGES      MetaDataOperation = 4
	MetaDataOperation_GET_COLUMNS                MetaDataOperation = 5
	MetaDataOperation_GET_CROSS_REFERENCE        MetaDataOperation = 6
	MetaDataOperation_GET_EXPORTED_KEYS          MetaDataOperation = 7
	MetaDataOperation_GET_FUNCTION_COLUMNS       MetaDataOperation = 8
	MetaDataOperation_GET_FUNCTIONS              MetaDataOperation = 9
	MetaDataOperation_GET_IMPORTED_KEYS          MetaDataOperation = 10
	MetaDataOperation_GET_INDEX_INFO             MetaDataOperation = 11
	MetaDataOperation_GET_PRIMARY_KEYS           MetaDataOperation = 12
	MetaDataOperation_GET_PROCEDURE_COLUMNS      MetaDataOperation = 13
	MetaDataOperation_GET_PROCEDURES             MetaDataOperation = 14
	MetaDataOperation_GET_PSEUDO_COLUMNS         MetaDataOperation = 15
	MetaDataOperation_GET_SCHEMAS                MetaDataOperation = 16
	MetaDataOperation_GET_SCHEMAS_WITH_ARGS      MetaDataOperation = 17
	MetaDataOperation_GET_SUPER_TABLES           MetaDataOperation = 18
	MetaDataOperation_GET_SUPER_TYPES            MetaDataOperation = 19
	MetaDataOperation_GET_TABLE_PRIVILEGES       MetaDataOperation = 20
	MetaDataOperation_GET_TABLES                 MetaDataOperation = 21
	MetaDataOperation_GET_TABLE_TYPES            MetaDataOperation = 22
	MetaDataOperation_GET_TYPE_INFO              MetaDataOperation = 23
	MetaDataOperation_GET_UDTS                   MetaDataOperation = 24
	MetaDataOperation_GET_VERSION_COLUMNS        MetaDataOperation = 25
)

var MetaDataOperation_name = map[int32]string{
	0:  "GET_ATTRIBUTES",
	1:  "GET_BEST_ROW_IDENTIFIER",
	2:  "GET_CATALOGS",
	3:  "GET_CLIENT_INFO_PROPERTIES",
	4:  "GET_COLUMN_PRIVILEGES",
	5:  "GET_COLUMNS",
	6:  "GET_CROSS_REFERENCE",
	7:  "GET_EXPORTED_KEYS",
	8:  "GET_FUNCTION_COLUMNS",
	9:  "GET_FUNCTIONS",
	10: "GET_IMPORTED_KEYS",
	11: "GET_INDEX_INFO",
	12: "GET_PRIMARY_KEYS",
	13: "GET_PROCEDURE_COLUMNS",
	14: "GET_PROCEDURES",
	15: "GET_PSEUDO_COLUMNS",
	16: "GET_SCHEMAS",
	17: "GET_SCHEMAS_WITH_ARGS",
	18: "GET_SUPER_TABLES",
	19: "GET_SUPER_TYPES",
	20: "GET_TABLE_PRIVILEGES",
	21: "GET_TABLES",
	22: "GET_TABLE_TYPES",
	23: "GET_TYPE_INFO",
	24: "GET_UDTS",
	25: "GET_VERSION_COLUMNS",
}
var MetaDataOperation_value = map[string]int32{
	"GET_ATTRIBUTES":             0,
	"GET_BEST_ROW_IDENTIFIER":    1,
	"GET_CATALOGS":               2,
	"GET_CLIENT_INFO_PROPERTIES": 3,
	"GET_COLUMN_PRIVILEGES":      4,
	"GET_COLUMNS":                5,
	"GET_CROSS_REFERENCE":        6,
	"GET_EXPORTED_KEYS":          7,
	"GET_FUNCTION_COLUMNS":       8,
	"GET_FUNCTIONS":              9,
	"GET_IMPORTED_KEYS":          10,
	"GET_INDEX_INFO":             11,
	"GET_PRIMARY_KEYS":           12,
	"GET_PROCEDURE_COLUMNS":      13,
	"GET_PROCEDURES":             14,
	"GET_PSEUDO_COLUMNS":         15,
	"GET_SCHEMAS":                16,
	"GET_SCHEMAS_WITH_ARGS":      17,
	"GET_SUPER_TABLES":           18,
	"GET_SUPER_TYPES":            19,
	"GET_TABLE_PRIVILEGES":       20,
	"GET_TABLES":                 21,
	"GET_TABLE_TYPES":            22,
	"GET_TYPE_INFO":              23,
	"GET_UDTS":                   24,
	"GET_VERSION_COLUMNS":        25,
}

func (x MetaDataOperation) String() string {
	return proto.EnumName(MetaDataOperation_name, int32(x))
}
func (MetaDataOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StateType int32

const (
	StateType_SQL      StateType = 0
	StateType_METADATA StateType = 1
)

var StateType_name = map[int32]string{
	0: "SQL",
	1: "METADATA",
}
var StateType_value = map[string]int32{
	"SQL":      0,
	"METADATA": 1,
}

func (x StateType) String() string {
	return proto.EnumName(StateType_name, int32(x))
}
func (StateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CursorFactory_Style int32

const (
	CursorFactory_OBJECT            CursorFactory_Style = 0
	CursorFactory_RECORD            CursorFactory_Style = 1
	CursorFactory_RECORD_PROJECTION CursorFactory_Style = 2
	CursorFactory_ARRAY             CursorFactory_Style = 3
	CursorFactory_LIST              CursorFactory_Style = 4
	CursorFactory_MAP               CursorFactory_Style = 5
)

var CursorFactory_Style_name = map[int32]string{
	0: "OBJECT",
	1: "RECORD",
	2: "RECORD_PROJECTION",
	3: "ARRAY",
	4: "LIST",
	5: "MAP",
}
var CursorFactory_Style_value = map[string]int32{
	"OBJECT":            0,
	"RECORD":            1,
	"RECORD_PROJECTION": 2,
	"ARRAY":             3,
	"LIST":              4,
	"MAP":               5,
}

func (x CursorFactory_Style) String() string {
	return proto.EnumName(CursorFactory_Style_name, int32(x))
}
func (CursorFactory_Style) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type MetaDataOperationArgument_ArgumentType int32

const (
	MetaDataOperationArgument_STRING          MetaDataOperationArgument_ArgumentType = 0
	MetaDataOperationArgument_BOOL            MetaDataOperationArgument_ArgumentType = 1
	MetaDataOperationArgument_INT             MetaDataOperationArgument_ArgumentType = 2
	MetaDataOperationArgument_REPEATED_STRING MetaDataOperationArgument_ArgumentType = 3
	MetaDataOperationArgument_REPEATED_INT    MetaDataOperationArgument_ArgumentType = 4
	MetaDataOperationArgument_NULL            MetaDataOperationArgument_ArgumentType = 5
)

var MetaDataOperationArgument_ArgumentType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT",
	3: "REPEATED_STRING",
	4: "REPEATED_INT",
	5: "NULL",
}
var MetaDataOperationArgument_ArgumentType_value = map[string]int32{
	"STRING":          0,
	"BOOL":            1,
	"INT":             2,
	"REPEATED_STRING": 3,
	"REPEATED_INT":    4,
	"NULL":            5,
}

func (x MetaDataOperationArgument_ArgumentType) String() string {
	return proto.EnumName(MetaDataOperationArgument_ArgumentType_name, int32(x))
}
func (MetaDataOperationArgument_ArgumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

// Details about a connection
type ConnectionProperties struct {
	IsDirty              bool   `protobuf:"varint,1,opt,name=is_dirty,json=isDirty" json:"is_dirty,omitempty"`
	AutoCommit           bool   `protobuf:"varint,2,opt,name=auto_commit,json=autoCommit" json:"auto_commit,omitempty"`
	HasAutoCommit        bool   `protobuf:"varint,7,opt,name=has_auto_commit,json=hasAutoCommit" json:"has_auto_commit,omitempty"`
	ReadOnly             bool   `protobuf:"varint,3,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	HasReadOnly          bool   `protobuf:"varint,8,opt,name=has_read_only,json=hasReadOnly" json:"has_read_only,omitempty"`
	TransactionIsolation uint32 `protobuf:"varint,4,opt,name=transaction_isolation,json=transactionIsolation" json:"transaction_isolation,omitempty"`
	Catalog              string `protobuf:"bytes,5,opt,name=catalog" json:"catalog,omitempty"`
	Schema               string `protobuf:"bytes,6,opt,name=schema" json:"schema,omitempty"`
}

func (m *ConnectionProperties) Reset()                    { *m = ConnectionProperties{} }
func (m *ConnectionProperties) String() string            { return proto.CompactTextString(m) }
func (*ConnectionProperties) ProtoMessage()               {}
func (*ConnectionProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Statement handle
type StatementHandle struct {
	ConnectionId string     `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Id           uint32     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Signature    *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *StatementHandle) Reset()                    { *m = StatementHandle{} }
func (m *StatementHandle) String() string            { return proto.CompactTextString(m) }
func (*StatementHandle) ProtoMessage()               {}
func (*StatementHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatementHandle) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Results of preparing a statement
type Signature struct {
	Columns       []*ColumnMetaData   `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Sql           string              `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
	Parameters    []*AvaticaParameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty"`
	CursorFactory *CursorFactory      `protobuf:"bytes,4,opt,name=cursor_factory,json=cursorFactory" json:"cursor_factory,omitempty"`
	StatementType StatementType       `protobuf:"varint,5,opt,name=statementType,enum=StatementType" json:"statementType,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Signature) GetColumns() []*ColumnMetaData {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Signature) GetParameters() []*AvaticaParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Signature) GetCursorFactory() *CursorFactory {
	if m != nil {
		return m.CursorFactory
	}
	return nil
}

type ColumnMetaData struct {
	Ordinal            uint32       `protobuf:"varint,1,opt,name=ordinal" json:"ordinal,omitempty"`
	AutoIncrement      bool         `protobuf:"varint,2,opt,name=auto_increment,json=autoIncrement" json:"auto_increment,omitempty"`
	CaseSensitive      bool         `protobuf:"varint,3,opt,name=case_sensitive,json=caseSensitive" json:"case_sensitive,omitempty"`
	Searchable         bool         `protobuf:"varint,4,opt,name=searchable" json:"searchable,omitempty"`
	Currency           bool         `protobuf:"varint,5,opt,name=currency" json:"currency,omitempty"`
	Nullable           uint32       `protobuf:"varint,6,opt,name=nullable" json:"nullable,omitempty"`
	Signed             bool         `protobuf:"varint,7,opt,name=signed" json:"signed,omitempty"`
	DisplaySize        uint32       `protobuf:"varint,8,opt,name=display_size,json=displaySize" json:"display_size,omitempty"`
	Label              string       `protobuf:"bytes,9,opt,name=label" json:"label,omitempty"`
	ColumnName         string       `protobuf:"bytes,10,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	SchemaName         string       `protobuf:"bytes,11,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	Precision          uint32       `protobuf:"varint,12,opt,name=precision" json:"precision,omitempty"`
	Scale              uint32       `protobuf:"varint,13,opt,name=scale" json:"scale,omitempty"`
	TableName          string       `protobuf:"bytes,14,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	CatalogName        string       `protobuf:"bytes,15,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	ReadOnly           bool         `protobuf:"varint,16,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	Writable           bool         `protobuf:"varint,17,opt,name=writable" json:"writable,omitempty"`
	DefinitelyWritable bool         `protobuf:"varint,18,opt,name=definitely_writable,json=definitelyWritable" json:"definitely_writable,omitempty"`
	ColumnClassName    string       `protobuf:"bytes,19,opt,name=column_class_name,json=columnClassName" json:"column_class_name,omitempty"`
	Type               *AvaticaType `protobuf:"bytes,20,opt,name=type" json:"type,omitempty"`
}

func (m *ColumnMetaData) Reset()                    { *m = ColumnMetaData{} }
func (m *ColumnMetaData) String() string            { return proto.CompactTextString(m) }
func (*ColumnMetaData) ProtoMessage()               {}
func (*ColumnMetaData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ColumnMetaData) GetType() *AvaticaType {
	if m != nil {
		return m.Type
	}
	return nil
}

// Base class for a column type
type AvaticaType struct {
	Id        uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Rep       Rep               `protobuf:"varint,3,opt,name=rep,enum=Rep" json:"rep,omitempty"`
	Columns   []*ColumnMetaData `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Component *AvaticaType      `protobuf:"bytes,5,opt,name=component" json:"component,omitempty"`
}

func (m *AvaticaType) Reset()                    { *m = AvaticaType{} }
func (m *AvaticaType) String() string            { return proto.CompactTextString(m) }
func (*AvaticaType) ProtoMessage()               {}
func (*AvaticaType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AvaticaType) GetColumns() []*ColumnMetaData {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *AvaticaType) GetComponent() *AvaticaType {
	if m != nil {
		return m.Component
	}
	return nil
}

// Metadata for a parameter
type AvaticaParameter struct {
	Signed        bool   `protobuf:"varint,1,opt,name=signed" json:"signed,omitempty"`
	Precision     uint32 `protobuf:"varint,2,opt,name=precision" json:"precision,omitempty"`
	Scale         uint32 `protobuf:"varint,3,opt,name=scale" json:"scale,omitempty"`
	ParameterType uint32 `protobuf:"varint,4,opt,name=parameter_type,json=parameterType" json:"parameter_type,omitempty"`
	TypeName      string `protobuf:"bytes,5,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	ClassName     string `protobuf:"bytes,6,opt,name=class_name,json=className" json:"class_name,omitempty"`
	Name          string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

func (m *AvaticaParameter) Reset()                    { *m = AvaticaParameter{} }
func (m *AvaticaParameter) String() string            { return proto.CompactTextString(m) }
func (*AvaticaParameter) ProtoMessage()               {}
func (*AvaticaParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Information necessary to convert an Iterable into a Calcite Cursor
type CursorFactory struct {
	Style      CursorFactory_Style `protobuf:"varint,1,opt,name=style,enum=CursorFactory_Style" json:"style,omitempty"`
	ClassName  string              `protobuf:"bytes,2,opt,name=class_name,json=className" json:"class_name,omitempty"`
	FieldNames []string            `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
}

func (m *CursorFactory) Reset()                    { *m = CursorFactory{} }
func (m *CursorFactory) String() string            { return proto.CompactTextString(m) }
func (*CursorFactory) ProtoMessage()               {}
func (*CursorFactory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// A collection of rows
type Frame struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Done   bool   `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	Rows   []*Row `protobuf:"bytes,3,rep,name=rows" json:"rows,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Frame) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

// A row is a collection of values
type Row struct {
	Value []*ColumnValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Row) GetValue() []*ColumnValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Database property, list of functions the database provides for a certain operation
type DatabaseProperty struct {
	Name      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Functions []string `protobuf:"bytes,2,rep,name=functions" json:"functions,omitempty"`
}

func (m *DatabaseProperty) Reset()                    { *m = DatabaseProperty{} }
func (m *DatabaseProperty) String() string            { return proto.CompactTextString(m) }
func (*DatabaseProperty) ProtoMessage()               {}
func (*DatabaseProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Message which encapsulates another message to support a single RPC endpoint
type WireMessage struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	WrappedMessage []byte `protobuf:"bytes,2,opt,name=wrapped_message,json=wrappedMessage,proto3" json:"wrapped_message,omitempty"`
}

func (m *WireMessage) Reset()                    { *m = WireMessage{} }
func (m *WireMessage) String() string            { return proto.CompactTextString(m) }
func (*WireMessage) ProtoMessage()               {}
func (*WireMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// A value might be a TypedValue or an Array of TypedValue's
type ColumnValue struct {
	Value         []*TypedValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	ArrayValue    []*TypedValue `protobuf:"bytes,2,rep,name=array_value,json=arrayValue" json:"array_value,omitempty"`
	HasArrayValue bool          `protobuf:"varint,3,opt,name=has_array_value,json=hasArrayValue" json:"has_array_value,omitempty"`
	ScalarValue   *TypedValue   `protobuf:"bytes,4,opt,name=scalar_value,json=scalarValue" json:"scalar_value,omitempty"`
}

func (m *ColumnValue) Reset()                    { *m = ColumnValue{} }
func (m *ColumnValue) String() string            { return proto.CompactTextString(m) }
func (*ColumnValue) ProtoMessage()               {}
func (*ColumnValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ColumnValue) GetValue() []*TypedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ColumnValue) GetArrayValue() []*TypedValue {
	if m != nil {
		return m.ArrayValue
	}
	return nil
}

func (m *ColumnValue) GetScalarValue() *TypedValue {
	if m != nil {
		return m.ScalarValue
	}
	return nil
}

// Generic wrapper to support any SQL type. Struct-like to work around no polymorphism construct.
type TypedValue struct {
	Type        Rep    `protobuf:"varint,1,opt,name=type,enum=Rep" json:"type,omitempty"`
	BoolValue   bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	NumberValue int64  `protobuf:"zigzag64,4,opt,name=number_value,json=numberValue" json:"number_value,omitempty"`
	// includes numeric types and date/time types.
	BytesValues []byte  `protobuf:"bytes,5,opt,name=bytes_values,json=bytesValues,proto3" json:"bytes_values,omitempty"`
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	Null        bool    `protobuf:"varint,7,opt,name=null" json:"null,omitempty"`
}

func (m *TypedValue) Reset()                    { *m = TypedValue{} }
func (m *TypedValue) String() string            { return proto.CompactTextString(m) }
func (*TypedValue) ProtoMessage()               {}
func (*TypedValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// Represents the breadth of arguments to DatabaseMetaData functions
type MetaDataOperationArgument struct {
	StringValue       string                                 `protobuf:"bytes,1,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BoolValue         bool                                   `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	IntValue          int32                                  `protobuf:"zigzag32,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	StringArrayValues []string                               `protobuf:"bytes,4,rep,name=string_array_values,json=stringArrayValues" json:"string_array_values,omitempty"`
	IntArrayValues    []int32                                `protobuf:"zigzag32,5,rep,name=int_array_values,json=intArrayValues" json:"int_array_values,omitempty"`
	Type              MetaDataOperationArgument_ArgumentType `protobuf:"varint,6,opt,name=type,enum=MetaDataOperationArgument_ArgumentType" json:"type,omitempty"`
}

func (m *MetaDataOperationArgument) Reset()                    { *m = MetaDataOperationArgument{} }
func (m *MetaDataOperationArgument) String() string            { return proto.CompactTextString(m) }
func (*MetaDataOperationArgument) ProtoMessage()               {}
func (*MetaDataOperationArgument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type QueryState struct {
	Type    StateType                    `protobuf:"varint,1,opt,name=type,enum=StateType" json:"type,omitempty"`
	Sql     string                       `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
	Op      MetaDataOperation            `protobuf:"varint,3,opt,name=op,enum=MetaDataOperation" json:"op,omitempty"`
	Args    []*MetaDataOperationArgument `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	HasArgs bool                         `protobuf:"varint,5,opt,name=has_args,json=hasArgs" json:"has_args,omitempty"`
	HasSql  bool                         `protobuf:"varint,6,opt,name=has_sql,json=hasSql" json:"has_sql,omitempty"`
	HasOp   bool                         `protobuf:"varint,7,opt,name=has_op,json=hasOp" json:"has_op,omitempty"`
}

func (m *QueryState) Reset()                    { *m = QueryState{} }
func (m *QueryState) String() string            { return proto.CompactTextString(m) }
func (*QueryState) ProtoMessage()               {}
func (*QueryState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QueryState) GetArgs() []*MetaDataOperationArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectionProperties)(nil), "ConnectionProperties")
	proto.RegisterType((*StatementHandle)(nil), "StatementHandle")
	proto.RegisterType((*Signature)(nil), "Signature")
	proto.RegisterType((*ColumnMetaData)(nil), "ColumnMetaData")
	proto.RegisterType((*AvaticaType)(nil), "AvaticaType")
	proto.RegisterType((*AvaticaParameter)(nil), "AvaticaParameter")
	proto.RegisterType((*CursorFactory)(nil), "CursorFactory")
	proto.RegisterType((*Frame)(nil), "Frame")
	proto.RegisterType((*Row)(nil), "Row")
	proto.RegisterType((*DatabaseProperty)(nil), "DatabaseProperty")
	proto.RegisterType((*WireMessage)(nil), "WireMessage")
	proto.RegisterType((*ColumnValue)(nil), "ColumnValue")
	proto.RegisterType((*TypedValue)(nil), "TypedValue")
	proto.RegisterType((*MetaDataOperationArgument)(nil), "MetaDataOperationArgument")
	proto.RegisterType((*QueryState)(nil), "QueryState")
	proto.RegisterEnum("StatementType", StatementType_name, StatementType_value)
	proto.RegisterEnum("Rep", Rep_name, Rep_value)
	proto.RegisterEnum("Severity", Severity_name, Severity_value)
	proto.RegisterEnum("MetaDataOperation", MetaDataOperation_name, MetaDataOperation_value)
	proto.RegisterEnum("StateType", StateType_name, StateType_value)
	proto.RegisterEnum("CursorFactory_Style", CursorFactory_Style_name, CursorFactory_Style_value)
	proto.RegisterEnum("MetaDataOperationArgument_ArgumentType", MetaDataOperationArgument_ArgumentType_name, MetaDataOperationArgument_ArgumentType_value)
}

var fileDescriptor0 = []byte{
	// 2157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x58, 0xcd, 0x6e, 0xdb, 0xd8,
	0x15, 0xae, 0x2c, 0xc9, 0x96, 0x8e, 0x7e, 0x4c, 0xd1, 0x4e, 0xa2, 0x24, 0x33, 0xd3, 0x54, 0x45,
	0x3b, 0x33, 0x46, 0xa1, 0xa2, 0x99, 0x76, 0xd5, 0x15, 0x2d, 0xd1, 0x36, 0x33, 0x92, 0xa8, 0xb9,
	0xa4, 0xe2, 0xf1, 0x66, 0x08, 0x5a, 0xa2, 0x1d, 0x02, 0x32, 0xa9, 0x92, 0x54, 0x02, 0xf5, 0x2d,
	0xfa, 0x04, 0x2d, 0xfa, 0x10, 0x7d, 0x8f, 0x2e, 0x8a, 0xae, 0xba, 0x29, 0x50, 0xa0, 0xdb, 0xbe,
	0x41, 0xcf, 0x39, 0x97, 0x7f, 0xca, 0x0f, 0x66, 0x65, 0xde, 0xef, 0x7c, 0xf7, 0xdc, 0xf3, 0x7f,
	0xaf, 0x0c, 0xed, 0x65, 0xf8, 0xf0, 0x10, 0x06, 0xc3, 0x4d, 0x14, 0x26, 0xe1, 0xe0, 0xaf, 0x07,
	0x70, 0x3a, 0x0a, 0x83, 0xc0, 0x5b, 0x26, 0x7e, 0x18, 0xcc, 0xa3, 0x70, 0xe3, 0x45, 0x89, 0xef,
	0xc5, 0xea, 0x53, 0x68, 0xf8, 0xb1, 0xb3, 0xf2, 0xa3, 0x64, 0xd7, 0xaf, 0xbc, 0xa8, 0x7c, 0xd5,
	0x10, 0x47, 0x7e, 0x3c, 0xa6, 0xa5, 0xfa, 0x53, 0x68, 0xb9, 0xdb, 0x24, 0x74, 0x48, 0x91, 0x9f,
	0xf4, 0x0f, 0x58, 0x0a, 0x04, 0x8d, 0x18, 0x51, 0x7f, 0x09, 0xc7, 0x6f, 0xdc, 0xd8, 0x29, 0x93,
	0x8e, 0x98, 0xd4, 0x41, 0x58, 0x2b, 0x78, 0xcf, 0xa1, 0x19, 0x79, 0xee, 0xca, 0x09, 0x83, 0xf5,
	0xae, 0x5f, 0x65, 0x46, 0x83, 0x00, 0x13, 0xd7, 0xea, 0x00, 0x88, 0xed, 0x14, 0x84, 0x06, 0x13,
	0x5a, 0x08, 0x8a, 0x8c, 0xf3, 0x0d, 0x3c, 0x4a, 0x22, 0x37, 0x88, 0x5d, 0xb6, 0xde, 0xf1, 0xe3,
	0x70, 0xed, 0xd2, 0x57, 0xbf, 0x86, 0xdc, 0x8e, 0x38, 0x2d, 0x09, 0x8d, 0x4c, 0xa6, 0xf6, 0xe1,
	0x68, 0xe9, 0x26, 0xee, 0x3a, 0xbc, 0xef, 0xd7, 0x91, 0xd6, 0x14, 0xd9, 0x52, 0x7d, 0x0c, 0x87,
	0xf1, 0xf2, 0x8d, 0xf7, 0xe0, 0xf6, 0x0f, 0x59, 0x90, 0xae, 0x06, 0x1b, 0x38, 0xb6, 0x12, 0x37,
	0xf1, 0x1e, 0xbc, 0x20, 0xb9, 0x72, 0x83, 0xd5, 0xda, 0x53, 0x7f, 0x0e, 0x9d, 0x65, 0x1e, 0x36,
	0xc7, 0x5f, 0x71, 0x8c, 0x9a, 0xa2, 0x5d, 0x80, 0xc6, 0x4a, 0xed, 0xc2, 0x01, 0x4a, 0x0e, 0xd8,
	0x16, 0xfc, 0x52, 0xbf, 0x82, 0x66, 0xec, 0xdf, 0x07, 0x6e, 0xb2, 0x8d, 0x3c, 0xf6, 0xb7, 0xf5,
	0x12, 0x86, 0x56, 0x86, 0x88, 0x42, 0x38, 0xf8, 0x6f, 0x05, 0x9a, 0xb9, 0x40, 0xfd, 0x1a, 0x2d,
	0x0e, 0xd7, 0xdb, 0x87, 0x20, 0xc6, 0x63, 0xaa, 0xb8, 0xeb, 0x78, 0x38, 0xe2, 0xf5, 0xd4, 0x4b,
	0xdc, 0x31, 0x1a, 0x2f, 0x32, 0xb9, 0xaa, 0x40, 0x35, 0xfe, 0xc3, 0x9a, 0xcf, 0x6c, 0x0a, 0xfa,
	0x54, 0x7f, 0x03, 0xb0, 0x71, 0x23, 0xf7, 0xc1, 0x4b, 0xbc, 0x28, 0xc6, 0x53, 0x69, 0x7f, 0x6f,
	0xa8, 0xbd, 0xc5, 0x60, 0x2c, 0xdd, 0x79, 0x26, 0x11, 0x25, 0x92, 0xfa, 0x3b, 0xe8, 0x2e, 0xb7,
	0x51, 0x1c, 0x46, 0xce, 0x1d, 0x06, 0x2f, 0x8c, 0x76, 0x1c, 0xcf, 0xd6, 0xcb, 0xee, 0x70, 0xc4,
	0xf0, 0x85, 0x44, 0x45, 0x67, 0x59, 0x5e, 0xaa, 0xbf, 0x85, 0x4e, 0x9c, 0x85, 0xc9, 0xde, 0x6d,
	0x3c, 0x0e, 0x6f, 0x17, 0x77, 0x59, 0x65, 0x54, 0xec, 0x93, 0x06, 0x7f, 0xaa, 0x43, 0x77, 0xdf,
	0x1b, 0xca, 0x50, 0x18, 0xad, 0xfc, 0xc0, 0x5d, 0x73, 0x58, 0x3b, 0x22, 0x5b, 0xaa, 0xbf, 0x80,
	0x2e, 0x57, 0x95, 0x1f, 0x2c, 0x23, 0x56, 0x91, 0x56, 0x5f, 0x87, 0x50, 0x23, 0x03, 0x89, 0xb6,
	0x74, 0x63, 0xcf, 0x89, 0xbd, 0x20, 0xf6, 0x13, 0xff, 0xad, 0x97, 0x56, 0x57, 0x87, 0x50, 0x2b,
	0x03, 0xd5, 0x2f, 0x00, 0x62, 0xcf, 0x8d, 0x96, 0x6f, 0xdc, 0xdb, 0xb5, 0xc7, 0x3e, 0x62, 0x1d,
	0x17, 0x88, 0xfa, 0x0c, 0x1a, 0xe8, 0x61, 0xe4, 0x05, 0xcb, 0x1d, 0xfb, 0x82, 0xe5, 0x99, 0xad,
	0x49, 0x16, 0x6c, 0xd7, 0x6b, 0xde, 0x79, 0xc8, 0x46, 0xe6, 0x6b, 0xae, 0x23, 0x4c, 0x9e, 0xb7,
	0x4a, 0xcb, 0x3e, 0x5d, 0xa9, 0x3f, 0x83, 0xf6, 0xca, 0x8f, 0x37, 0x6b, 0x77, 0xe7, 0xc4, 0xfe,
	0x1f, 0x3d, 0xae, 0xe8, 0x8e, 0x68, 0xa5, 0x98, 0x85, 0x90, 0x7a, 0x0a, 0x75, 0xd4, 0xe1, 0xad,
	0xfb, 0x4d, 0xce, 0xa0, 0x5c, 0x50, 0xc7, 0xc9, 0x04, 0x3b, 0x01, 0xe6, 0xa8, 0x0f, 0x2c, 0x03,
	0x09, 0xcd, 0x10, 0x21, 0x82, 0xac, 0x55, 0x49, 0x68, 0x49, 0x82, 0x84, 0x98, 0xf0, 0x19, 0x34,
	0x37, 0x91, 0xb7, 0xf4, 0x63, 0xea, 0x8e, 0x36, 0x9f, 0x5b, 0x00, 0x74, 0x6a, 0xbc, 0x74, 0xd1,
	0x93, 0x0e, 0x4b, 0xe4, 0x42, 0xfd, 0x1c, 0x20, 0x21, 0x7f, 0xa4, 0xce, 0x2e, 0xeb, 0x6c, 0x32,
	0xc2, 0x2a, 0xd1, 0x9b, 0xb4, 0x71, 0x24, 0xe1, 0x98, 0x09, 0xad, 0x14, 0x63, 0xca, 0x5e, 0x83,
	0x2b, 0xef, 0x35, 0x38, 0x46, 0xf0, 0x5d, 0xe4, 0xb3, 0xbe, 0x7e, 0x4f, 0xca, 0xb2, 0xb5, 0xfa,
	0x6b, 0x38, 0x59, 0x79, 0x77, 0x7e, 0xe0, 0x27, 0xde, 0x7a, 0xe7, 0xe4, 0x34, 0x95, 0x69, 0x6a,
	0x21, 0xba, 0xce, 0x36, 0x9c, 0x41, 0x2f, 0x8d, 0xd0, 0x72, 0xed, 0xc6, 0xb1, 0xb4, 0xe8, 0x84,
	0x2d, 0x3a, 0x96, 0x82, 0x11, 0xe1, 0x6c, 0xd5, 0x0b, 0xa8, 0x25, 0x54, 0x9e, 0xa7, 0x5c, 0xd4,
	0xed, 0xac, 0x17, 0xb8, 0x38, 0x59, 0x32, 0xf8, 0x4b, 0x05, 0x5a, 0x25, 0x34, 0x6d, 0xe4, 0x4a,
	0xde, 0xc8, 0x2a, 0xd4, 0xf8, 0x00, 0xd9, 0x66, 0xfc, 0x8d, 0x49, 0xaf, 0x46, 0xde, 0x86, 0x0b,
	0xad, 0xfb, 0xb2, 0x36, 0x14, 0xde, 0x46, 0x10, 0x50, 0x6e, 0xde, 0xda, 0x8f, 0x34, 0xef, 0x19,
	0x34, 0x71, 0x5c, 0x6e, 0xc2, 0x80, 0x0a, 0xbb, 0xfe, 0x11, 0xeb, 0x0a, 0xf1, 0xe0, 0x1f, 0x15,
	0x50, 0xde, 0x6f, 0xe2, 0x52, 0xe1, 0x55, 0xf6, 0x0a, 0x6f, 0x2f, 0xfb, 0x07, 0x9f, 0xcc, 0x7e,
	0xb5, 0x9c, 0x7d, 0xec, 0xa1, 0x7c, 0x24, 0x38, 0x1c, 0x2f, 0x39, 0x54, 0x3b, 0x39, 0xca, 0xa1,
	0xc1, 0x14, 0x93, 0x50, 0x06, 0x5c, 0xce, 0xd3, 0x06, 0x01, 0x1c, 0x69, 0xac, 0xa0, 0x52, 0x3a,
	0xe4, 0x50, 0x6d, 0x2e, 0xf3, 0x44, 0x64, 0x61, 0x3c, 0x2a, 0xc2, 0x38, 0xf8, 0x7b, 0x05, 0x3a,
	0x7b, 0x53, 0x06, 0xa3, 0x52, 0x8f, 0x93, 0x1d, 0x9a, 0x57, 0xe1, 0xd0, 0x9e, 0xee, 0x0f, 0x21,
	0x1c, 0x2e, 0x28, 0x13, 0x92, 0xf2, 0xde, 0x81, 0x07, 0xef, 0x1f, 0x88, 0x6d, 0x72, 0xe7, 0x7b,
	0xeb, 0x15, 0x8b, 0xe5, 0x30, 0xc4, 0x36, 0x61, 0x88, 0xe4, 0xf1, 0xc0, 0x86, 0x3a, 0xeb, 0x53,
	0x01, 0x0e, 0xcd, 0xf3, 0x57, 0xfa, 0xc8, 0x56, 0x7e, 0x42, 0xdf, 0x42, 0x1f, 0x99, 0x62, 0xac,
	0x54, 0xd4, 0x47, 0xd0, 0x93, 0xdf, 0xce, 0x5c, 0x98, 0x24, 0x37, 0xcc, 0x99, 0x72, 0xa0, 0x36,
	0xa1, 0xae, 0x09, 0xa1, 0xdd, 0x28, 0x55, 0xb5, 0x01, 0xb5, 0x89, 0x61, 0xd9, 0x4a, 0x4d, 0x3d,
	0x82, 0xea, 0x54, 0x9b, 0x2b, 0xf5, 0xc1, 0x14, 0xea, 0x17, 0x91, 0xac, 0x91, 0xc3, 0xf0, 0xee,
	0x2e, 0xf6, 0x12, 0xf6, 0xa5, 0x26, 0xd2, 0x15, 0x05, 0x62, 0x85, 0x69, 0x4d, 0x87, 0x19, 0x7f,
	0xe3, 0x10, 0xac, 0x45, 0xe1, 0xbb, 0x6c, 0x62, 0x63, 0x41, 0x85, 0xef, 0x04, 0x23, 0x83, 0xaf,
	0xa1, 0x8a, 0x0b, 0xbc, 0x20, 0xeb, 0x6f, 0xdd, 0xf5, 0xd6, 0x4b, 0xef, 0x84, 0x76, 0x5a, 0x56,
	0xaf, 0x09, 0x13, 0x52, 0x34, 0x18, 0x83, 0x42, 0x25, 0x76, 0x8b, 0x63, 0x2f, 0xbd, 0xdb, 0x77,
	0x79, 0xd4, 0x2b, 0xa5, 0xe2, 0xc5, 0x02, 0xb9, 0xdb, 0x06, 0x7c, 0x6f, 0xc5, 0x68, 0x05, 0x85,
	0xa5, 0x00, 0x06, 0xaf, 0xa0, 0x75, 0xed, 0x47, 0xde, 0xd4, 0x8b, 0x63, 0xf7, 0xde, 0xfb, 0xa8,
	0x82, 0x2f, 0xe1, 0xf8, 0x5d, 0xe4, 0x6e, 0x36, 0xde, 0xca, 0x79, 0x90, 0x34, 0x76, 0xa6, 0x2d,
	0xba, 0x29, 0x9c, 0x6e, 0x1e, 0xfc, 0x0d, 0x5b, 0xab, 0x64, 0x28, 0x4e, 0x91, 0x3d, 0x2f, 0x5a,
	0x43, 0xaa, 0xaa, 0x55, 0xd9, 0x09, 0xf5, 0x57, 0xf8, 0xde, 0x88, 0x22, 0x1c, 0x9a, 0x92, 0x78,
	0xf0, 0x21, 0x11, 0x58, 0x2e, 0x15, 0x66, 0x8f, 0x8f, 0xd2, 0x8e, 0x6a, 0xf1, 0xf8, 0x28, 0x78,
	0x43, 0x68, 0x53, 0xa1, 0xbb, 0x51, 0x4a, 0x92, 0x57, 0xdc, 0x9e, 0xda, 0x96, 0x24, 0xf0, 0x62,
	0xf0, 0x9f, 0x0a, 0x40, 0x21, 0xa3, 0xf4, 0x70, 0x53, 0x54, 0x4a, 0xfd, 0xce, 0x08, 0xd5, 0xe0,
	0x6d, 0x18, 0xae, 0x73, 0x6b, 0xe9, 0xec, 0x26, 0x21, 0x99, 0xc3, 0xed, 0x38, 0x89, 0xfc, 0xe0,
	0xbe, 0x64, 0x1c, 0x8e, 0x4d, 0x89, 0xe5, 0x94, 0x60, 0xfb, 0x70, 0xeb, 0x95, 0x4d, 0x53, 0x45,
	0x4b, 0x62, 0x39, 0xe5, 0x76, 0x97, 0x78, 0xb1, 0x64, 0xc4, 0xdc, 0x79, 0x6d, 0xd1, 0x62, 0x8c,
	0x19, 0x31, 0xdf, 0x36, 0xe1, 0x96, 0xe6, 0xb7, 0xd4, 0x42, 0xed, 0x57, 0xc1, 0xdb, 0x86, 0x31,
	0xa9, 0x85, 0x32, 0x89, 0x97, 0x56, 0x7a, 0x4d, 0xf1, 0xf7, 0xe0, 0x7f, 0x07, 0xf0, 0x34, 0x1b,
	0x4d, 0x26, 0x56, 0x0c, 0x3f, 0x9a, 0xb4, 0xe8, 0x7e, 0xcb, 0x37, 0xeb, 0xfb, 0xd6, 0x57, 0x3e,
	0xb4, 0xfe, 0x47, 0xfc, 0xc7, 0x81, 0xe1, 0x07, 0x49, 0xc9, 0xf9, 0x9e, 0x68, 0x20, 0x90, 0x25,
	0xe5, 0x24, 0x55, 0x5f, 0xca, 0x9f, 0x1c, 0x9c, 0x4d, 0xd1, 0x93, 0xa2, 0x22, 0x87, 0x31, 0xbe,
	0xa8, 0x14, 0x52, 0xb6, 0x47, 0xae, 0x23, 0xb9, 0x27, 0xba, 0x88, 0x97, 0x99, 0xbf, 0x4f, 0xf3,
	0x75, 0xc8, 0xf9, 0xfa, 0x72, 0xf8, 0x49, 0x17, 0x87, 0xd9, 0x47, 0xe9, 0x3e, 0xf8, 0x01, 0xda,
	0x65, 0x94, 0x26, 0x82, 0x65, 0x0b, 0x63, 0x76, 0x89, 0xd3, 0x01, 0xfb, 0xfd, 0xdc, 0x34, 0x27,
	0x38, 0x1b, 0xb0, 0xdf, 0x8d, 0x99, 0x8d, 0xd3, 0xe0, 0x04, 0x8e, 0x85, 0x3e, 0xd7, 0x35, 0x5b,
	0x1f, 0x3b, 0x29, 0xaf, 0x8a, 0x2f, 0xb3, 0x76, 0x0e, 0x12, 0xad, 0x46, 0x3b, 0x67, 0x8b, 0xc9,
	0x04, 0x07, 0xc4, 0xbf, 0xb0, 0xb6, 0xbe, 0xdb, 0x7a, 0xd1, 0x8e, 0x5f, 0x4a, 0xf8, 0x2e, 0x29,
	0xd7, 0x16, 0xc8, 0xf7, 0x53, 0x61, 0xce, 0x47, 0x1e, 0x79, 0x03, 0x38, 0x08, 0xb3, 0xbb, 0x47,
	0xfd, 0xd0, 0x37, 0x81, 0x52, 0x8c, 0x6d, 0xcd, 0x8d, 0xee, 0xb3, 0x5b, 0xe8, 0xd9, 0xa7, 0x23,
	0x20, 0x98, 0x47, 0xbf, 0x00, 0x64, 0x23, 0xdd, 0xc7, 0xe9, 0xeb, 0xe7, 0x88, 0x3b, 0x08, 0x45,
	0x4f, 0x80, 0x3e, 0x1d, 0x32, 0xe2, 0x50, 0x5e, 0x34, 0xb8, 0xb4, 0xd0, 0x8e, 0x47, 0x40, 0x5f,
	0x0e, 0xda, 0x22, 0x4b, 0xaa, 0x8e, 0x2b, 0x73, 0x73, 0xf6, 0x67, 0x1c, 0xea, 0x7b, 0x8f, 0x40,
	0x8e, 0xa0, 0x3e, 0xc9, 0xe7, 0xab, 0x31, 0xb3, 0x74, 0x61, 0x63, 0x0c, 0xf1, 0x7b, 0x31, 0x1f,
	0x63, 0x90, 0x30, 0x8c, 0xf8, 0x3d, 0x46, 0x0e, 0x7e, 0x57, 0x25, 0xce, 0x9c, 0x1a, 0x0d, 0xdb,
	0xa9, 0x2e, 0x2e, 0x75, 0xa5, 0xae, 0x76, 0xa0, 0x69, 0xda, 0x57, 0xba, 0x70, 0xc6, 0xd3, 0x89,
	0x72, 0x48, 0xac, 0x91, 0xa0, 0x10, 0x2b, 0x47, 0x14, 0xdd, 0xb1, 0x30, 0xe7, 0x4a, 0x83, 0x87,
	0xf3, 0xc4, 0xd6, 0x85, 0xd2, 0x2c, 0xf1, 0xc7, 0x13, 0x05, 0x88, 0x33, 0xd2, 0x30, 0x03, 0xad,
	0xb3, 0x7f, 0x57, 0x71, 0xa8, 0xe2, 0x6d, 0x8d, 0xf3, 0x7d, 0x2e, 0x8c, 0xa9, 0x61, 0x1b, 0xaf,
	0x75, 0x87, 0xf2, 0xaa, 0x6b, 0x33, 0x34, 0x51, 0x85, 0x6e, 0x09, 0xbe, 0xc1, 0x03, 0x2a, 0xfb,
	0xd8, 0xe8, 0x4a, 0x13, 0x32, 0xf3, 0x05, 0x66, 0x5d, 0x99, 0x68, 0x6f, 0x55, 0xed, 0x41, 0xa7,
	0x00, 0x65, 0xea, 0xf7, 0xf6, 0x4e, 0x4c, 0x2c, 0x90, 0xfa, 0xfe, 0xde, 0x8b, 0x89, 0xa9, 0xd9,
	0xe8, 0xd1, 0x29, 0x28, 0x05, 0x38, 0x36, 0x17, 0xe7, 0x13, 0xf2, 0xad, 0x05, 0x47, 0x99, 0x6d,
	0x0d, 0x2e, 0x40, 0xb2, 0x88, 0xbd, 0x23, 0x3b, 0xb4, 0x11, 0x39, 0x0b, 0xe4, 0xb7, 0x34, 0xa1,
	0x45, 0x1b, 0xf0, 0x60, 0xfd, 0x12, 0xf1, 0x36, 0xdf, 0x50, 0x74, 0x64, 0x87, 0x18, 0xf2, 0xa0,
	0x2e, 0x07, 0x5b, 0xaa, 0x3f, 0x56, 0x8f, 0xa1, 0x75, 0x6e, 0x5c, 0x3a, 0xd9, 0x8e, 0xa7, 0x19,
	0x30, 0xd6, 0x47, 0xc6, 0x54, 0x9b, 0x28, 0xcf, 0xc8, 0xa5, 0x57, 0xda, 0x6b, 0xcd, 0xb1, 0xbe,
	0x9b, 0x38, 0xb6, 0x31, 0xd5, 0x15, 0x05, 0xef, 0x36, 0x75, 0x0f, 0xb2, 0x6c, 0x6d, 0x3a, 0x57,
	0x7a, 0x7b, 0x54, 0x4e, 0xac, 0x4a, 0xde, 0x33, 0xb4, 0xb0, 0x8d, 0x14, 0x3b, 0xe1, 0x23, 0xd0,
	0x8b, 0xac, 0x5f, 0x4e, 0x4b, 0x3d, 0xf6, 0x88, 0xbe, 0x67, 0x8b, 0xe9, 0x39, 0xda, 0xf2, 0xb8,
	0x74, 0x33, 0x3f, 0xc9, 0x3b, 0xa8, 0x5f, 0x5c, 0xc0, 0xcf, 0xd3, 0x8d, 0x0b, 0x24, 0x7c, 0xa6,
	0xb6, 0xa1, 0x31, 0x5d, 0x4c, 0x6c, 0xc3, 0xd2, 0x6d, 0xe5, 0xf3, 0xb3, 0x1f, 0xa0, 0x61, 0x79,
	0x6f, 0x3d, 0x7c, 0x33, 0xee, 0x28, 0xb0, 0x8b, 0xd9, 0xb7, 0x33, 0xf3, 0x7a, 0xe6, 0x58, 0xfa,
	0x6b, 0x5d, 0x18, 0xf6, 0x8d, 0xcc, 0xf3, 0x85, 0x66, 0x6b, 0x93, 0x02, 0xe3, 0x3c, 0xeb, 0x42,
	0x98, 0xa2, 0xc0, 0x0e, 0x68, 0xf7, 0xb5, 0x26, 0x66, 0x68, 0x5d, 0x81, 0x56, 0xcf, 0xfe, 0x59,
	0x83, 0xde, 0x07, 0x5d, 0x45, 0xfb, 0x2f, 0x75, 0xdb, 0xd1, 0x6c, 0xf4, 0xe6, 0x7c, 0x61, 0xeb,
	0x16, 0x9e, 0xf3, 0x1c, 0x9e, 0x10, 0x76, 0x8e, 0x51, 0x72, 0x84, 0x79, 0xed, 0x18, 0x63, 0x7d,
	0x66, 0x1b, 0x17, 0x06, 0x7a, 0x58, 0xa1, 0x49, 0x41, 0xc2, 0x11, 0x19, 0x62, 0x5e, 0x5a, 0x78,
	0xdc, 0x17, 0xf0, 0x8c, 0x91, 0x89, 0x81, 0x34, 0xcc, 0xcb, 0x85, 0x49, 0xcf, 0x8f, 0x39, 0xb6,
	0x83, 0x81, 0xea, 0xaa, 0xd8, 0xaa, 0x8f, 0x58, 0x6e, 0x4e, 0x16, 0xd3, 0x19, 0x8a, 0x8c, 0xd7,
	0xc6, 0x04, 0x53, 0x67, 0x61, 0xa5, 0x61, 0x5c, 0x0b, 0x91, 0x85, 0x65, 0xf6, 0x04, 0x4e, 0x18,
	0x10, 0xa6, 0x65, 0x39, 0x42, 0xbf, 0xd0, 0x85, 0x3e, 0x1b, 0xe9, 0x58, 0x6a, 0x58, 0xfa, 0x24,
	0xd0, 0xbf, 0x9f, 0x63, 0xcd, 0xe0, 0x90, 0xfa, 0x56, 0xbf, 0xb1, 0xb0, 0xd6, 0xfa, 0x70, 0x4a,
	0xf0, 0xc5, 0x62, 0xc6, 0x8f, 0x9d, 0x5c, 0x53, 0x83, 0x32, 0x5b, 0x96, 0x58, 0x58, 0x81, 0xa9,
	0x0e, 0x63, 0x5a, 0xd6, 0x01, 0x59, 0x08, 0x8c, 0xd9, 0x58, 0xff, 0x9e, 0xcd, 0xc7, 0x92, 0xc4,
	0x10, 0x12, 0x46, 0xd5, 0xad, 0x89, 0x1b, 0xc9, 0x6c, 0x67, 0x9e, 0xa0, 0x77, 0x23, 0x7d, 0xbc,
	0x10, 0x7a, 0x7e, 0x5c, 0x27, 0x53, 0x92, 0x8b, 0x2c, 0xac, 0x5a, 0x2c, 0x3a, 0xc6, 0x2c, 0x7d,
	0x31, 0x36, 0x73, 0xee, 0x71, 0xe6, 0xb5, 0x35, 0xba, 0xd2, 0xa7, 0x9a, 0x85, 0xd5, 0x99, 0xea,
	0x4d, 0x01, 0xe7, 0xda, 0xb0, 0xaf, 0x1c, 0x4d, 0x60, 0x70, 0x7b, 0x99, 0x21, 0xd6, 0x02, 0xe3,
	0xe9, 0xd8, 0x1a, 0xb6, 0x80, 0x85, 0x35, 0x8a, 0xdd, 0x58, 0x42, 0x6f, 0xe6, 0x08, 0x9e, 0x64,
	0xb1, 0x60, 0x52, 0x39, 0xcc, 0xa7, 0xf8, 0x0b, 0x01, 0x72, 0x89, 0x85, 0x15, 0x9b, 0x6e, 0x97,
	0x4c, 0xb9, 0xfd, 0x71, 0x16, 0x30, 0x5a, 0xca, 0x28, 0x3c, 0xa1, 0x02, 0x25, 0x68, 0x31, 0xb6,
	0x2d, 0xac, 0xe2, 0x34, 0x37, 0x58, 0x50, 0x56, 0x39, 0xd4, 0x4f, 0xcf, 0x06, 0xd0, 0xcc, 0x2f,
	0x01, 0xba, 0x67, 0xb0, 0x99, 0xb0, 0x8a, 0xa8, 0xba, 0x75, 0x5b, 0xc3, 0x0e, 0xd2, 0x94, 0xca,
	0xf9, 0x00, 0x5e, 0x84, 0xd1, 0xfd, 0xd0, 0xdd, 0xb8, 0xf8, 0xb3, 0x6f, 0x88, 0x2f, 0x97, 0x25,
	0xfe, 0x44, 0x1a, 0xba, 0xf2, 0x37, 0x82, 0xfc, 0x77, 0xcf, 0xed, 0x21, 0xff, 0xf9, 0xe6, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x77, 0xc8, 0xb4, 0x05, 0x12, 0x00, 0x00,
}

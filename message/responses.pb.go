// Code generated by protoc-gen-go.
// source: responses.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Response that contains a result set.
type ResultSetResponse struct {
	ConnectionId string     `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	StatementId  uint32     `protobuf:"varint,2,opt,name=statement_id,json=statementId" json:"statement_id,omitempty"`
	OwnStatement bool       `protobuf:"varint,3,opt,name=own_statement,json=ownStatement" json:"own_statement,omitempty"`
	Signature    *Signature `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	FirstFrame   *Frame     `protobuf:"bytes,5,opt,name=first_frame,json=firstFrame" json:"first_frame,omitempty"`
	UpdateCount  uint64     `protobuf:"varint,6,opt,name=update_count,json=updateCount" json:"update_count,omitempty"`
	// with no signature nor other data.
	Metadata *RpcMetadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ResultSetResponse) Reset()                    { *m = ResultSetResponse{} }
func (m *ResultSetResponse) String() string            { return proto.CompactTextString(m) }
func (*ResultSetResponse) ProtoMessage()               {}
func (*ResultSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ResultSetResponse) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ResultSetResponse) GetFirstFrame() *Frame {
	if m != nil {
		return m.FirstFrame
	}
	return nil
}

func (m *ResultSetResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to PrepareAndExecuteRequest
type ExecuteResponse struct {
	Results          []*ResultSetResponse `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	MissingStatement bool                 `protobuf:"varint,2,opt,name=missing_statement,json=missingStatement" json:"missing_statement,omitempty"`
	Metadata         *RpcMetadata         `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ExecuteResponse) GetResults() []*ResultSetResponse {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ExecuteResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to PrepareRequest
type PrepareResponse struct {
	Statement *StatementHandle `protobuf:"bytes,1,opt,name=statement" json:"statement,omitempty"`
	Metadata  *RpcMetadata     `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *PrepareResponse) Reset()                    { *m = PrepareResponse{} }
func (m *PrepareResponse) String() string            { return proto.CompactTextString(m) }
func (*PrepareResponse) ProtoMessage()               {}
func (*PrepareResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *PrepareResponse) GetStatement() *StatementHandle {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *PrepareResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to FetchRequest
type FetchResponse struct {
	Frame            *Frame       `protobuf:"bytes,1,opt,name=frame" json:"frame,omitempty"`
	MissingStatement bool         `protobuf:"varint,2,opt,name=missing_statement,json=missingStatement" json:"missing_statement,omitempty"`
	MissingResults   bool         `protobuf:"varint,3,opt,name=missing_results,json=missingResults" json:"missing_results,omitempty"`
	Metadata         *RpcMetadata `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *FetchResponse) GetFrame() *Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *FetchResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to CreateStatementRequest
type CreateStatementResponse struct {
	ConnectionId string       `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	StatementId  uint32       `protobuf:"varint,2,opt,name=statement_id,json=statementId" json:"statement_id,omitempty"`
	Metadata     *RpcMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CreateStatementResponse) Reset()                    { *m = CreateStatementResponse{} }
func (m *CreateStatementResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateStatementResponse) ProtoMessage()               {}
func (*CreateStatementResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CreateStatementResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to CloseStatementRequest
type CloseStatementResponse struct {
	Metadata *RpcMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CloseStatementResponse) Reset()                    { *m = CloseStatementResponse{} }
func (m *CloseStatementResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseStatementResponse) ProtoMessage()               {}
func (*CloseStatementResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CloseStatementResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to OpenConnectionRequest {
type OpenConnectionResponse struct {
	Metadata *RpcMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *OpenConnectionResponse) Reset()                    { *m = OpenConnectionResponse{} }
func (m *OpenConnectionResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenConnectionResponse) ProtoMessage()               {}
func (*OpenConnectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *OpenConnectionResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to CloseConnectionRequest {
type CloseConnectionResponse struct {
	Metadata *RpcMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CloseConnectionResponse) Reset()                    { *m = CloseConnectionResponse{} }
func (m *CloseConnectionResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseConnectionResponse) ProtoMessage()               {}
func (*CloseConnectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CloseConnectionResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response to ConnectionSyncRequest
type ConnectionSyncResponse struct {
	ConnProps *ConnectionProperties `protobuf:"bytes,1,opt,name=conn_props,json=connProps" json:"conn_props,omitempty"`
	Metadata  *RpcMetadata          `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ConnectionSyncResponse) Reset()                    { *m = ConnectionSyncResponse{} }
func (m *ConnectionSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectionSyncResponse) ProtoMessage()               {}
func (*ConnectionSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ConnectionSyncResponse) GetConnProps() *ConnectionProperties {
	if m != nil {
		return m.ConnProps
	}
	return nil
}

func (m *ConnectionSyncResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DatabasePropertyElement struct {
	Key      *DatabaseProperty `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value    *TypedValue       `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Metadata *RpcMetadata      `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *DatabasePropertyElement) Reset()                    { *m = DatabasePropertyElement{} }
func (m *DatabasePropertyElement) String() string            { return proto.CompactTextString(m) }
func (*DatabasePropertyElement) ProtoMessage()               {}
func (*DatabasePropertyElement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *DatabasePropertyElement) GetKey() *DatabaseProperty {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DatabasePropertyElement) GetValue() *TypedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DatabasePropertyElement) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Response for Meta#getDatabaseProperties()
type DatabasePropertyResponse struct {
	Props    []*DatabasePropertyElement `protobuf:"bytes,1,rep,name=props" json:"props,omitempty"`
	Metadata *RpcMetadata               `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *DatabasePropertyResponse) Reset()                    { *m = DatabasePropertyResponse{} }
func (m *DatabasePropertyResponse) String() string            { return proto.CompactTextString(m) }
func (*DatabasePropertyResponse) ProtoMessage()               {}
func (*DatabasePropertyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *DatabasePropertyResponse) GetProps() []*DatabasePropertyElement {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *DatabasePropertyResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Send contextual information about some error over the wire from the server.
type ErrorResponse struct {
	Exceptions    []string     `protobuf:"bytes,1,rep,name=exceptions" json:"exceptions,omitempty"`
	HasExceptions bool         `protobuf:"varint,7,opt,name=has_exceptions,json=hasExceptions" json:"has_exceptions,omitempty"`
	ErrorMessage  string       `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Severity      Severity     `protobuf:"varint,3,opt,name=severity,enum=Severity" json:"severity,omitempty"`
	ErrorCode     uint32       `protobuf:"varint,4,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	SqlState      string       `protobuf:"bytes,5,opt,name=sql_state,json=sqlState" json:"sql_state,omitempty"`
	Metadata      *RpcMetadata `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *ErrorResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type SyncResultsResponse struct {
	MissingStatement bool         `protobuf:"varint,1,opt,name=missing_statement,json=missingStatement" json:"missing_statement,omitempty"`
	MoreResults      bool         `protobuf:"varint,2,opt,name=more_results,json=moreResults" json:"more_results,omitempty"`
	Metadata         *RpcMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *SyncResultsResponse) Reset()                    { *m = SyncResultsResponse{} }
func (m *SyncResultsResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncResultsResponse) ProtoMessage()               {}
func (*SyncResultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *SyncResultsResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Generic metadata for the server to return with each response.
type RpcMetadata struct {
	ServerAddress string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
}

func (m *RpcMetadata) Reset()                    { *m = RpcMetadata{} }
func (m *RpcMetadata) String() string            { return proto.CompactTextString(m) }
func (*RpcMetadata) ProtoMessage()               {}
func (*RpcMetadata) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

// Response to a commit request
type CommitResponse struct {
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

// Response to a rollback request
type RollbackResponse struct {
}

func (m *RollbackResponse) Reset()                    { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()               {}
func (*RollbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

// Response to a batch update request
type ExecuteBatchResponse struct {
	ConnectionId     string       `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	StatementId      uint32       `protobuf:"varint,2,opt,name=statement_id,json=statementId" json:"statement_id,omitempty"`
	UpdateCounts     []uint64     `protobuf:"varint,3,rep,name=update_counts,json=updateCounts" json:"update_counts,omitempty"`
	MissingStatement bool         `protobuf:"varint,4,opt,name=missing_statement,json=missingStatement" json:"missing_statement,omitempty"`
	Metadata         *RpcMetadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ExecuteBatchResponse) Reset()                    { *m = ExecuteBatchResponse{} }
func (m *ExecuteBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchResponse) ProtoMessage()               {}
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *ExecuteBatchResponse) GetMetadata() *RpcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*ResultSetResponse)(nil), "ResultSetResponse")
	proto.RegisterType((*ExecuteResponse)(nil), "ExecuteResponse")
	proto.RegisterType((*PrepareResponse)(nil), "PrepareResponse")
	proto.RegisterType((*FetchResponse)(nil), "FetchResponse")
	proto.RegisterType((*CreateStatementResponse)(nil), "CreateStatementResponse")
	proto.RegisterType((*CloseStatementResponse)(nil), "CloseStatementResponse")
	proto.RegisterType((*OpenConnectionResponse)(nil), "OpenConnectionResponse")
	proto.RegisterType((*CloseConnectionResponse)(nil), "CloseConnectionResponse")
	proto.RegisterType((*ConnectionSyncResponse)(nil), "ConnectionSyncResponse")
	proto.RegisterType((*DatabasePropertyElement)(nil), "DatabasePropertyElement")
	proto.RegisterType((*DatabasePropertyResponse)(nil), "DatabasePropertyResponse")
	proto.RegisterType((*ErrorResponse)(nil), "ErrorResponse")
	proto.RegisterType((*SyncResultsResponse)(nil), "SyncResultsResponse")
	proto.RegisterType((*RpcMetadata)(nil), "RpcMetadata")
	proto.RegisterType((*CommitResponse)(nil), "CommitResponse")
	proto.RegisterType((*RollbackResponse)(nil), "RollbackResponse")
	proto.RegisterType((*ExecuteBatchResponse)(nil), "ExecuteBatchResponse")
}

var fileDescriptor2 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x96, 0x73, 0x6b, 0x33, 0xb9, 0xd6, 0xff, 0x0f, 0x44, 0xdc, 0x54, 0x52, 0xa1, 0x56, 0x02,
	0x79, 0x51, 0xfa, 0x02, 0x34, 0xa4, 0x82, 0x45, 0x45, 0x35, 0x41, 0x6c, 0xad, 0xa9, 0x7d, 0x9a,
	0x5a, 0xf5, 0xad, 0x33, 0x93, 0xd2, 0xbc, 0x01, 0x12, 0x0b, 0x76, 0xac, 0x79, 0x01, 0x5e, 0x88,
	0xa7, 0xe1, 0x8c, 0xc7, 0x99, 0xb8, 0x34, 0x0d, 0x0d, 0x74, 0x15, 0xfb, 0x3b, 0xdf, 0x9c, 0x73,
	0xfc, 0xcd, 0xcc, 0x77, 0x42, 0x3a, 0x1c, 0x44, 0x9a, 0xc4, 0x02, 0x84, 0x93, 0xf2, 0x44, 0x26,
	0x0f, 0x9b, 0x5e, 0x12, 0x45, 0x49, 0xac, 0xdf, 0xfa, 0xdf, 0x4b, 0x64, 0x83, 0x82, 0x98, 0x84,
	0x72, 0x04, 0x92, 0xe6, 0x54, 0x7b, 0x8b, 0xb4, 0xbc, 0x24, 0x8e, 0xc1, 0x93, 0x41, 0x12, 0xbb,
	0x81, 0xdf, 0xb3, 0x36, 0xad, 0x9d, 0x3a, 0x6d, 0xce, 0xc1, 0x77, 0xbe, 0xfd, 0x8c, 0x34, 0x85,
	0x64, 0x12, 0x22, 0x88, 0xa5, 0xe2, 0x94, 0x90, 0xd3, 0xa2, 0x0d, 0x83, 0x21, 0x05, 0xf3, 0x24,
	0x9f, 0x62, 0xd7, 0x40, 0xbd, 0x32, 0x72, 0xd6, 0x69, 0x13, 0xc1, 0xd1, 0x0c, 0xb3, 0x77, 0x48,
	0x5d, 0x04, 0xe3, 0x98, 0xc9, 0x09, 0x87, 0x5e, 0x05, 0x09, 0x8d, 0x5d, 0xe2, 0x8c, 0x66, 0x08,
	0x9d, 0x07, 0xed, 0x6d, 0xd2, 0x38, 0x09, 0xb8, 0x90, 0xee, 0x09, 0x67, 0x11, 0xf4, 0xaa, 0x19,
	0xb7, 0xe6, 0x1c, 0xa8, 0x37, 0x4a, 0xb2, 0x50, 0xf6, 0xac, 0x5a, 0x9b, 0xa4, 0x3e, 0x16, 0x70,
	0xbd, 0x64, 0x82, 0x65, 0x6b, 0xc8, 0xac, 0xd0, 0x86, 0xc6, 0x06, 0x0a, 0xc2, 0xaa, 0xeb, 0x11,
	0x48, 0x86, 0x00, 0xeb, 0xad, 0x65, 0x89, 0x9a, 0x0e, 0x4d, 0xbd, 0xc3, 0x1c, 0xa3, 0x26, 0xda,
	0xff, 0x66, 0x91, 0xce, 0xf0, 0x12, 0xbc, 0x89, 0x04, 0x23, 0xd0, 0x4b, 0xb2, 0xc6, 0x33, 0xd5,
	0x04, 0x4a, 0x53, 0xc6, 0xc5, 0xb6, 0x73, 0x4d, 0x45, 0x3a, 0xa3, 0xd8, 0x2f, 0xc8, 0x46, 0x14,
	0x08, 0x11, 0xc4, 0xe3, 0x82, 0x14, 0xa5, 0x4c, 0x8a, 0x6e, 0x1e, 0x28, 0xca, 0x31, 0x6f, 0xac,
	0xbc, 0xb4, 0xb1, 0x33, 0xd2, 0x39, 0xe2, 0x90, 0x32, 0x3e, 0xef, 0xcb, 0x41, 0x2d, 0x4d, 0x05,
	0x2b, 0x5b, 0xdd, 0x75, 0x4c, 0xee, 0xb7, 0x2c, 0xf6, 0x43, 0xa5, 0xe8, 0xc2, 0x62, 0xa5, 0xa5,
	0xc5, 0x7e, 0x58, 0xa4, 0x75, 0x00, 0xd2, 0x3b, 0x35, 0xb5, 0x1e, 0x93, 0xaa, 0xde, 0x07, 0xeb,
	0xca, 0x3e, 0x68, 0x70, 0xb5, 0x6f, 0xde, 0x26, 0x9d, 0x19, 0x79, 0x26, 0xab, 0x3e, 0x29, 0xed,
	0x1c, 0xa6, 0xb9, 0x92, 0xc5, 0x7e, 0x2b, 0x4b, 0xfb, 0xfd, 0x62, 0x91, 0x07, 0x03, 0x0e, 0x58,
	0xc1, 0x94, 0xb9, 0xf3, 0xe3, 0x7d, 0xfb, 0xad, 0xda, 0x27, 0xf7, 0x07, 0x61, 0x22, 0x16, 0xf4,
	0x52, 0xcc, 0x61, 0xfd, 0x29, 0xc7, 0xfb, 0x14, 0xe2, 0x81, 0x69, 0xf2, 0x2f, 0x72, 0x0c, 0x50,
	0x14, 0xd5, 0xc7, 0x3f, 0x25, 0xb9, 0xc4, 0x8f, 0x31, 0xeb, 0x47, 0xd3, 0xd8, 0x33, 0x39, 0xf6,
	0x08, 0x51, 0x1a, 0xba, 0xe8, 0x2d, 0xa9, 0xc8, 0xb3, 0xdc, 0x73, 0xe6, 0xe4, 0x23, 0xc4, 0x81,
	0xcb, 0x00, 0x04, 0xad, 0x2b, 0xa2, 0x7a, 0x17, 0x2b, 0x1c, 0x42, 0xb5, 0xa9, 0x6f, 0xf0, 0xe1,
	0x98, 0x09, 0xc8, 0x73, 0x4d, 0x87, 0xa1, 0x3e, 0x43, 0x5b, 0xa4, 0x7c, 0x06, 0xd3, 0xbc, 0xe8,
	0x86, 0xf3, 0x3b, 0x8d, 0xaa, 0x28, 0x6e, 0x6a, 0xf5, 0x82, 0x85, 0x13, 0xc8, 0xeb, 0x34, 0x9c,
	0x0f, 0xd3, 0x14, 0xfc, 0x8f, 0x0a, 0xa2, 0x3a, 0xb2, 0xc2, 0xa6, 0x4a, 0xd2, 0xbb, 0x56, 0x65,
	0x7e, 0x11, 0xab, 0x33, 0x11, 0x94, 0x3d, 0xf4, 0x9c, 0x1b, 0xda, 0xa6, 0x9a, 0xb6, 0x82, 0x06,
	0x9f, 0x4b, 0xa4, 0x35, 0xe4, 0x3c, 0xe1, 0xa6, 0xd6, 0x53, 0x42, 0xe0, 0xd2, 0x83, 0x54, 0x29,
	0xac, 0x0b, 0xd6, 0x69, 0x01, 0xb1, 0x9f, 0x93, 0xf6, 0x29, 0x13, 0x6e, 0x81, 0xb3, 0x96, 0x5d,
	0xae, 0x16, 0xa2, 0xc3, 0x39, 0x0d, 0x6f, 0x05, 0xa8, 0xbc, 0x6e, 0x04, 0x42, 0xb0, 0xb1, 0xd6,
	0x08, 0x6f, 0x45, 0x06, 0x1e, 0x6a, 0x0c, 0x73, 0xad, 0x0b, 0xb8, 0x00, 0x1e, 0xc8, 0x69, 0xa6,
	0x4e, 0x7b, 0xb7, 0xee, 0x8c, 0x72, 0x80, 0x9a, 0x90, 0xfd, 0x04, 0x5b, 0xca, 0x72, 0x79, 0x89,
	0xaf, 0x4d, 0xbd, 0x45, 0xeb, 0x19, 0x32, 0x40, 0xc0, 0x7e, 0x84, 0x36, 0x75, 0x1e, 0x6a, 0x63,
	0xc8, 0x6c, 0xbc, 0x8e, 0x6b, 0xcf, 0xc3, 0xec, 0x76, 0x5c, 0x91, 0xa2, 0xb6, 0x54, 0x8a, 0xaf,
	0x16, 0xf9, 0x2f, 0x3f, 0x7f, 0xca, 0x1d, 0x8c, 0x20, 0x0b, 0xbd, 0xc7, 0xba, 0xc1, 0x7b, 0xf0,
	0x9e, 0x47, 0x09, 0x07, 0x63, 0x3c, 0xda, 0xa3, 0x1a, 0x0a, 0x5b, 0xe4, 0x3a, 0xcb, 0x8f, 0xc4,
	0x1e, 0x69, 0x14, 0x02, 0x4a, 0x79, 0x01, 0x1c, 0x35, 0x71, 0x99, 0xef, 0x63, 0x01, 0x91, 0x3b,
	0x4d, 0x4b, 0xa3, 0xaf, 0x35, 0xd8, 0xef, 0x92, 0xf6, 0x00, 0x87, 0x72, 0x60, 0x5c, 0xa1, 0x6f,
	0x93, 0x2e, 0x4d, 0xc2, 0xf0, 0x98, 0x79, 0x67, 0x06, 0xfb, 0x69, 0x91, 0xff, 0xf3, 0x39, 0xb4,
	0xcf, 0x8a, 0x46, 0x7c, 0x87, 0xd3, 0xba, 0x38, 0x35, 0x95, 0x07, 0x97, 0x71, 0x6c, 0x36, 0x0b,
	0x63, 0xf3, 0x86, 0x59, 0x56, 0xb9, 0xc5, 0x2c, 0xab, 0x2e, 0x13, 0x6e, 0xbf, 0x4f, 0x36, 0x13,
	0x3e, 0x76, 0x58, 0xca, 0xbc, 0x53, 0x70, 0x3c, 0x16, 0x7a, 0x81, 0x04, 0x87, 0x5d, 0x30, 0x19,
	0x78, 0x4c, 0xff, 0x57, 0x39, 0xae, 0x65, 0x3f, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x70,
	0x76, 0x9a, 0x2c, 0xd3, 0x08, 0x00, 0x00,
}
